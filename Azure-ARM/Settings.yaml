sqlServer: 
    name: "$SQLNAME"
    databaseName: "$SQLDBNAME"
    userName: "$SQLUSERNAME"
    password: "$SQLUSERPASSWORD"
profiseeRunTime:
    useLetsEncrypt: $USELETSENCRYPT
    adminAccount: "$ADMINACCOUNTNAME"
    fileRepository:
        accountName: "$FILEREPOACCOUNTNAME"
        userName: "$FILEREPOUSERNAME"
        password: "$FILEREPOPASSWORD"
        logonType: "NewCredentials"
        location: "$FILEREPOURL"
        fileShareName: "$FILEREPOSHARENAME"
    externalDnsUrl: "$EXTERNALDNSURL"
    externalDnsName: "$EXTERNALDNSNAME"
    webAppName: "$WEBAPPNAME"
    deployIngressRule: true
    isPaaS: true
    oidc:
        name: "Azure Active Directory"
        authority: "$OIDCURL"
        clientId: "$CLIENTID"
        clientSecret: "$OIDCCLIENTSECRET"
        usernameClaim: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
        userIdClaim: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"
        firstNameClaim: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname"
        lastNameClaim: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname"
        emailClaim: "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
        groupsClaim: "groups"
    clusterNodeCount: 1
clusterNode:
    limits:
      cpu: 1000
      memory: 10T
    requests:
      cpu: 1
      memory: 1000M        
image:
    registry: "profisee.azurecr.io"
    repository: "$ACRREPONAME"
    tag: "$ACRREPOLABEL"
    auth: |
        {
           "auths":{
              "profisee.azurecr.io":{
                 "username":"$ACRUSER",
                 "password":"$ACRPASSWORD",
                 "email":"$ACREMAIL",
                 "auth":"$ACRAUTH"
              }
           }
        }
licenseFileData: $LICENSEDATA
preInitScriptData: Cg==
postInitScriptData: Cg==
oidcFileData: |
    {      
    }
tlsCert: |
    $TLSCERT
tlsKey: |
    $TLSKEY  
cloud:
    azure:
      isProvider: true
      useKeyVault: $USEKEYVAULT
      keyVault:
        identity: #must be created in the AKS node resource group and have Get policies for key vault or Key Vault Secrets User for an RBAC key vault.
          clientId: "$KEYVAULTIDENTITCLIENTID"
          resourceId: $KEYVAULTIDENTITYRESOURCEID
        secrets:
          sqlUserName: $SQL_USERNAMESECRET
          sqlPassword: $SQL_USERPASSWORDSECRET
          tlsCertificate: $TLS_CERTSECRET
          license: $LICENSE_DATASECRET
        name: "$KEYVAULTNAME"
        resourceGroup: "$KEYVAULTRESOURCEGROUP"
        subscriptionId: "$AZURESUBSCRIPTIONID"
        tenantId: "$AZURETENANTID"
        clusterClientId: "$KUBERNETESCLIENTID" #clientId of the AKSCluster-agentpool identity; The "Managed Identity Operator" role must be assigned to the RG and Node RG; "Virtual Machine Contributor" role must be assigned to the Node RG.
      useManagedIdentity: false
      managedIdentity:
        name: ""
        clientId: ""
        resourceId: ""
      purview:
        tenantId: "$PURVIEWTENANTID"
        url: "$PURVIEWURL"
        collectionId: "$PURVIEWCOLLECTIONID"
        clientId: "$PURVIEWCLIENTID"
        clientSecret: "$PURVIEWCLIENTSECRET"
    aws:
      isProvider: false
    google:
      isProvider: false     
